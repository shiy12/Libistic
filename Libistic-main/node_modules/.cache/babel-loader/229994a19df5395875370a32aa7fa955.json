{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ManLu\\\\Documents\\\\GitHub\\\\Libistic\\\\Libistic-main\\\\src\\\\AutoComplete.js\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { Height } from '@material-ui/icons';\nconst filter = createFilterOptions();\nexport default function FreeSoloCreateOption() {\n  const [value, setValue] = React.useState(null);\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params); // Suggest the creation of a new value\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"Search the address\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: option => option.title,\n    style: {\n      width: 400,\n      Height: 40\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Search the address\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  });\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\nconst top100Films = [{\n  title: \"Hamilton Public Library - Barton Branch, Barton Street East, Hamilton, ON\"\n}, {\n  title: \"Hamilton Public Library - Westdale Branch, King Street East, Hamilton, ON\"\n}, {\n  title: 'Health Sciences Library, McMaster University, Health Sciences Centre, Main Street West, Hamilton, ON'\n}, {\n  title: 'H.G. Thode Library of Science and Engineering, Main Street West, Hamilton, ON'\n}, {\n  title: 'McMaster University, Main Street West, Hamilton, ON'\n}, {\n  title: 'Mills Memorial Library, Main Street West, Hamilton, ON'\n}];","map":{"version":3,"sources":["C:/Users/ManLu/Documents/GitHub/Libistic/Libistic-main/src/AutoComplete.js"],"names":["React","TextField","Autocomplete","createFilterOptions","Height","filter","FreeSoloCreateOption","value","setValue","useState","event","newValue","title","inputValue","options","params","filtered","push","top100Films","option","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAkD,+BAAlD;AACA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,MAAMC,MAAM,GAAGF,mBAAmB,EAAlC;AAEA,eAAe,SAASG,oBAAT,GAAgC;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,QAAN,CAAe,IAAf,CAA1B;AAEA,sBACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAEF,KADT;AAEE,IAAA,QAAQ,EAAE,CAACG,KAAD,EAAQC,QAAR,KAAqB;AAC7B,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCH,QAAAA,QAAQ,CAAC;AACPI,UAAAA,KAAK,EAAED;AADA,SAAD,CAAR;AAGD,OAJD,MAIO,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,UAAzB,EAAqC;AAC1C;AACAL,QAAAA,QAAQ,CAAC;AACPI,UAAAA,KAAK,EAAED,QAAQ,CAACE;AADT,SAAD,CAAR;AAGD,OALM,MAKA;AACLL,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACD;AACF,KAfH;AAgBE,IAAA,aAAa,EAAE,CAACG,OAAD,EAAUC,MAAV,KAAqB;AAClC,YAAMC,QAAQ,GAAGX,MAAM,CAACS,OAAD,EAAUC,MAAV,CAAvB,CADkC,CAGlC;;AACA,UAAIA,MAAM,CAACF,UAAP,KAAsB,EAA1B,EAA8B;AAC5BG,QAAAA,QAAQ,CAACC,IAAT,CAAc;AACZJ,UAAAA,UAAU,EAAEE,MAAM,CAACF;AADP,SAAd;AAGD;;AAED,aAAOG,QAAP;AACD,KA3BH;AA4BE,IAAA,aAAa,MA5Bf;AA6BE,IAAA,WAAW,MA7Bb;AA8BE,IAAA,iBAAiB,MA9BnB;AA+BE,IAAA,EAAE,EAAC,oBA/BL;AAgCE,IAAA,OAAO,EAAEE,WAhCX;AAiCE,IAAA,cAAc,EAAGC,MAAD,IAAY;AAC1B;AACA,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAOA,MAAP;AACD,OAJyB,CAK1B;;;AACA,aAAOA,MAAM,CAACP,KAAd;AACD,KAxCH;AAyCE,IAAA,YAAY,EAAGO,MAAD,IAAYA,MAAM,CAACP,KAzCnC;AA0CE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,KAAK,EAAE,GAAT;AAAchB,MAAAA,MAAM,EAAE;AAAtB,KA1CT;AA2CE,IAAA,QAAQ,MA3CV;AA4CE,IAAA,WAAW,EAAGW,MAAD,iBACX,oBAAC,SAAD,oBAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC,oBAA7B;AAAkD,MAAA,OAAO,EAAC,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA7CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAkDD,C,CAED;;AACA,MAAMG,WAAW,GAAG,CAChB;AAAEN,EAAAA,KAAK,EAAE;AAAT,CADgB,EAEhB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAFgB,EAGhB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAHgB,EAIhB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAJgB,EAKhB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CALgB,EAMhB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CANgB,CAApB","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport { Height } from '@material-ui/icons';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function FreeSoloCreateOption() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <Autocomplete\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n          setValue({\r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          // Create a new value from the user input\r\n          setValue({\r\n            title: newValue.inputValue,\r\n          });\r\n        } else {\r\n          setValue(newValue);\r\n        }\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        // Suggest the creation of a new value\r\n        if (params.inputValue !== '') {\r\n          filtered.push({\r\n            inputValue: params.inputValue,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      handleHomeEndKeys\r\n      id=\"Search the address\"\r\n      options={top100Films}\r\n      getOptionLabel={(option) => {\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n        // Regular option\r\n        return option.title;\r\n      }}\r\n      renderOption={(option) => option.title}\r\n      style={{ width: 400, Height: 40}}\r\n      freeSolo\r\n      renderInput={(params) => (\r\n        <TextField {...params} label=\"Search the address\" variant=\"outlined\" />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n    { title: \"Hamilton Public Library - Barton Branch, Barton Street East, Hamilton, ON\"},\r\n    { title: \"Hamilton Public Library - Westdale Branch, King Street East, Hamilton, ON\"},\r\n    { title: 'Health Sciences Library, McMaster University, Health Sciences Centre, Main Street West, Hamilton, ON'},\r\n    { title: 'H.G. Thode Library of Science and Engineering, Main Street West, Hamilton, ON'},\r\n    { title: 'McMaster University, Main Street West, Hamilton, ON'},\r\n    { title: 'Mills Memorial Library, Main Street West, Hamilton, ON'},\r\n\r\n];\r\n"]},"metadata":{},"sourceType":"module"}