"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ava_1 = require("ava");
var enzyme = require("enzyme");
var EnzymeAdapter = require("enzyme-adapter-react-16");
var redux = require("redux");
var src_1 = require("../../src");
enzyme.configure({ adapter: new EnzymeAdapter() });
function createStore(initialState) {
    if (initialState === void 0) { initialState = {}; }
    return redux.createStore(function (state, action) {
        return __assign(__assign({}, state), action.payload);
    }, initialState);
}
ava_1.default("Should pass it's props and state and redux state to wrapped component", function (t) {
    var reduxState = {
        john: "guitar",
        ringo: "drums",
        paul: "bass"
    };
    var containerProps = {
        foo: "FOO",
        baz: 123
    };
    var containerState = {
        foo: "foo",
        bar: "BAR"
    };
    var childProps = undefined;
    function MyComponent(props) {
        childProps = props;
        return null;
    }
    var MyContainer = /** @class */ (function (_super) {
        __extends(MyContainer, _super);
        function MyContainer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = containerState;
            return _this;
        }
        return MyContainer;
    }(src_1.ReduxContainer(MyComponent)));
    enzyme.shallow(React.createElement(MyContainer, __assign({}, containerProps)), { context: { store: createStore(reduxState) } }).dive();
    t.deepEqual(childProps, __assign(__assign(__assign({}, containerProps), containerState), reduxState));
});
ava_1.default("Should pass `getChildProps` to wrapped component", function (t) {
    var props = {
        foo: "FOO",
        bar: 123,
        baz: /baz/
    };
    var childProps = undefined;
    function MyComponent(props) {
        childProps = props;
        return null;
    }
    var MyContainer = /** @class */ (function (_super) {
        __extends(MyContainer, _super);
        function MyContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MyContainer.prototype.getChildProps = function () {
            return props;
        };
        return MyContainer;
    }(src_1.ReduxContainer(MyComponent)));
    enzyme.shallow(React.createElement(MyContainer, null), { context: { store: createStore() } }).dive();
    t.deepEqual(childProps, props);
});
ava_1.default("Should pass props, state and redux state to `getChildProps`", function (t) {
    var reduxState = {
        john: "guitar",
        ringo: "drums",
        paul: "bass"
    };
    var containerProps = {
        foo: "FOO",
        baz: 123
    };
    var containerState = {
        foo: "foo",
        bar: "BAR"
    };
    var passedProps = undefined;
    var passedState = undefined;
    var passedReduxState = undefined;
    var MyContainer = /** @class */ (function (_super) {
        __extends(MyContainer, _super);
        function MyContainer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = containerState;
            return _this;
        }
        MyContainer.prototype.getChildProps = function (props, state, reduxState) {
            passedProps = props;
            passedState = state;
            passedReduxState = reduxState;
            return {};
        };
        return MyContainer;
    }(src_1.ReduxContainer(function () { return null; })));
    enzyme.shallow(React.createElement(MyContainer, __assign({}, containerProps)), { context: { store: createStore(reduxState) } }).dive();
    t.deepEqual(passedProps, containerProps);
    t.deepEqual(passedState, containerState);
    t.deepEqual(passedReduxState, reduxState);
});
ava_1.default("Shouldn't update if 'unwatched' part of redux state updates", function (t) {
    var reduxState = {
        john: "guitar",
        ringo: "drums",
        paul: "bass"
    };
    var store = createStore(reduxState);
    var passedProps = undefined;
    var MyContainer = /** @class */ (function (_super) {
        __extends(MyContainer, _super);
        function MyContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MyContainer.prototype.getChildProps = function (_props, _state, reduxState) {
            return {
                john: reduxState.john
            };
        };
        return MyContainer;
    }(src_1.ReduxContainer(function (props) { return ((passedProps = props), null); })));
    var wrapper = enzyme.shallow(React.createElement(MyContainer, null), { context: { store: store } });
    wrapper.dive();
    t.deepEqual(passedProps, { john: reduxState.john });
    var passedPropsAfterFirstRender = passedProps;
    store.dispatch({ type: "update", payload: { ringo: "harmonica" } });
    wrapper.update();
    wrapper.dive();
    t.deepEqual(passedProps, passedPropsAfterFirstRender);
});
ava_1.default("Should update if 'watched' part of redux state updates", function (t) {
    var reduxState = {
        john: "guitar",
        ringo: "drums",
        paul: "bass"
    };
    var store = createStore(reduxState);
    var passedProps = undefined;
    var MyContainer = /** @class */ (function (_super) {
        __extends(MyContainer, _super);
        function MyContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MyContainer.prototype.getChildProps = function (_props, _state, reduxState) {
            return {
                john: reduxState.john
            };
        };
        return MyContainer;
    }(src_1.ReduxContainer(function (props) { return ((passedProps = props), null); })));
    var wrapper = enzyme.shallow(React.createElement(MyContainer, null), { context: { store: store } });
    wrapper.dive();
    t.deepEqual(passedProps, { john: reduxState.john });
    var passedPropsAfterFirstRender = passedProps;
    store.dispatch({ type: "update", payload: { john: "yoko ono" } });
    wrapper.update();
    wrapper.dive();
    t.true(passedProps !== passedPropsAfterFirstRender);
    t.deepEqual(passedProps, { john: "yoko ono" });
});
ava_1.default("Should return `getChildProps(this.props, this.state, this.store.getState())` from childProps", function (t) {
    var reduxState = {
        john: "guitar",
        ringo: "drums",
        paul: "bass"
    };
    var store = createStore(reduxState);
    var containerProps = {
        foo: "FOO",
        baz: 123
    };
    var containerState = {
        foo: "foo",
        bar: "BAR"
    };
    var MyContainer = /** @class */ (function (_super) {
        __extends(MyContainer, _super);
        function MyContainer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = containerState;
            return _this;
        }
        return MyContainer;
    }(src_1.ReduxContainer(function () { return null; })));
    var instance = enzyme.shallow(React.createElement(MyContainer, __assign({}, containerProps)), { context: { store: store } }).instance();
    t.deepEqual(instance.childProps, __assign(__assign(__assign({}, containerProps), containerState), reduxState));
});
//# sourceMappingURL=ReduxContainer.js.map