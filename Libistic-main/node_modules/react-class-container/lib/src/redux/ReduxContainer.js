"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Proptypes = require("prop-types");
var React = require("react");
var dummyStore = {
    dispatch: function (a) {
        return a;
    },
    getState: function () {
        return {};
    },
    subscribe: function () {
        return function () { return null; };
    },
    replaceReducer: function () { }
};
/**
 * Creates a container class for a wrapper template component
 *
 * The only purpose of the generated class is to render the wrapped
 * template with the value of `getChildProps`, which shall be implemented
 * by a subclass.
 * Also instances of the returned class have access to a redux store
 * passed via context.
 *
 * @param template a (probably presentational) Component to render
 * @returns a new ContainerClass
 *
 * @example
 * ```javascript
 const Foo = props => <span>{prop.name}</span>

  class FooContainer extends ReduxContainer(Foo) {
    getChildProps() {
      return { name: this.store.getState().name }
    }
  }

  // <FooContainer> renders <span>{/* content of `reduxState.name` *\/}</span>
  ```
 */
function ReduxContainer(template) {
    var ReduxContainerImplementation = /** @class */ (function (_super) {
        __extends(ReduxContainerImplementation, _super);
        function ReduxContainerImplementation(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this.unsubscribe = _this.store.subscribe(_this.onUpdate.bind(_this));
            return _this;
        }
        ReduxContainerImplementation.prototype.componentDidMount = function () {
            this.lastChildProps = this.getChildProps(this.props, this.state, this.store.getState());
        };
        ReduxContainerImplementation.prototype.componentWillUnmount = function () {
            this.unsubscribe();
        };
        ReduxContainerImplementation.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
            var lastChildProps = __assign({}, (this.lastChildProps || {}));
            var newChildProps = this.getChildProps(nextProps, nextState, nextContext.store.getState());
            var lastKeys = Object.keys(lastChildProps);
            var newKeys = Object.keys(newChildProps);
            this.lastChildProps = newChildProps;
            if (lastKeys.some(function (k) { return lastChildProps[k] !== newChildProps[k]; })) {
                return true;
            }
            else if (newKeys.some(function (k) { return lastChildProps[k] !== newChildProps[k]; })) {
                return true;
            }
            else {
                return false;
            }
        };
        Object.defineProperty(ReduxContainerImplementation.prototype, "store", {
            /**
             * the redux store, if one is accessiable from the container
             */
            get: function () {
                if (this.context.store) {
                    return this.context.store;
                }
                else {
                    if (process && process.env && process.env.NODE_ENV !== "production") {
                        console.error("ReduxContainer could not access redux store. You may forgot to provide your store via '<Provide store={store}>...</Provider>'");
                    }
                    return dummyStore;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReduxContainerImplementation.prototype, "childProps", {
            get: function () {
                return this.getChildProps(this.props, this.state, this.store.getState());
            },
            enumerable: true,
            configurable: true
        });
        ReduxContainerImplementation.prototype.getChildProps = function (props, state, reduxState) {
            return __assign(__assign(__assign({}, (props || {})), (state || {})), (reduxState || {}));
        };
        ReduxContainerImplementation.prototype.render = function () {
            return React.createElement(template, this.getChildProps(this.props, this.state, this.store.getState()));
        };
        ReduxContainerImplementation.prototype.onUpdate = function () {
            if (this.shouldComponentUpdate(this.props, this.state, this.context)) {
                return this.forceUpdate();
            }
        };
        ReduxContainerImplementation.contextTypes = {
            store: Proptypes.object.isRequired
        };
        return ReduxContainerImplementation;
    }(React.Component));
    return ReduxContainerImplementation;
}
exports.default = ReduxContainer;
//# sourceMappingURL=ReduxContainer.js.map