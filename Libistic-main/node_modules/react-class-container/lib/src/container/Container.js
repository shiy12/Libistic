"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
/**
 * Creates a container class for a wrapper template component
 *
 * The only purpose of the generated class is to render the wrapped
 * template with the value of `getChildProps`, which shall be implemented
 * by a subclass.
 *
 * @param template a (probably presentational) Component to render
 * @returns a new ContainerClass
 *
 * @example
 * ```javascript
  const Foo = props => <span>{prop.name}</span>

  class FooContainer extends Container(Foo) {
    getChildProps() {
      return { name: "Foo" }
    }

  // <FooContainer/> renders <span>Foo</span>
  ```
 */
function Container(template) {
    var ContainerImplementation = /** @class */ (function (_super) {
        __extends(ContainerImplementation, _super);
        function ContainerImplementation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ContainerImplementation.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
            var lastChildProps = __assign({}, (this.lastChildProps || {}));
            var newChildProps = this.getChildProps(nextProps, nextState);
            var lastKeys = Object.keys(lastChildProps);
            var newKeys = Object.keys(newChildProps);
            this.lastChildProps = newChildProps;
            if (lastKeys.some(function (k) { return lastChildProps[k] !== newChildProps[k]; })) {
                return true;
            }
            else if (newKeys.some(function (k) { return lastChildProps[k] !== newChildProps[k]; })) {
                return true;
            }
            else {
                return false;
            }
        };
        ContainerImplementation.prototype.render = function () {
            return React.createElement(template, this.getChildProps(this.props, this.state));
        };
        Object.defineProperty(ContainerImplementation.prototype, "childProps", {
            get: function () {
                return this.getChildProps(this.props, this.state);
            },
            enumerable: true,
            configurable: true
        });
        ContainerImplementation.prototype.getChildProps = function (props, state) {
            return __assign(__assign({}, (props || {})), (state || {}));
        };
        return ContainerImplementation;
    }(React.Component));
    return ContainerImplementation;
}
exports.default = Container;
//# sourceMappingURL=Container.js.map